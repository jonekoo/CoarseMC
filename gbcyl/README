Introduction
------------

This is PTGBCYL, a Monte Carlo simulation package for coarse-grained
molecular models.

The copyright belongs to Jouni Karjalainen (jouni.m.karjalainen@gmail.com)
for most of the code. Some included libraries, modules or subroutines have
different licensing. Where appropriate, these are documented in the
source files. 



Building
---------

Requirements:

The program is known to work with GCC 6.0.0 + OpenMPI 1.10.1 and Intel
Fortran 16.0.0 + Intel MPI 5.1.1. Older versions of the compilers may
lack support for some Fortran 2003/2008 features used in the program.
A C compiler is also needed.


Examples:

This example is assuming that a bourne shell eg. bash is used and that
the MPI wrappers for your Fortran and C compilers are called mpif90 and
mpicc, respectively.

Give the following commands in the shell at the top folder of the package: 

GNU:
./configure --prefix=yourinstallationpath FC=mpif90 \
FCFLAGS="-fno-range-check -O2" CC=mpicc CFLAGS="-O2" F77=mpif90 \
FFLAGS="-O2"
make

Intel:
./configure --prefix=yourinstallationpath FC=mpif90 \
FCFLAGS="-standard-semantics -O2" CC=mpicc CFLAGS="-O2" F77=mpif90 \
FFLAGS="-O2"
make

Note that the compiler flags "-standard-semantics" (Intel) and
"-fno-range-check" (GNU) are mandatory. The --prefix option is
optional and needed only if you want to install the binaries with

make install

To see more configuration options, use command
./configure --help


Optimization:

Use of compiler/linker flags for interprocedural optimization (IPO) is highly
recommended to reduce the run time! For Intel Fortran the options is -ipo.
With this option one must also change the linker and archiver to the Intel
xild and xiar as follows:

./configure --prefix=yourinstallationpath FC=mpif90 \
FCFLAGS="-standard-semantics -O2 -ipo" CC=mpicc CFLAGS="-O2" F77=mpif90 \
FFLAGS="-O2" LD=xild AR=xiar

When using interprocedural optimization you may have to compile the mt_stream
library first without it by going to the mt_stream-1.11 folder and giving the 
command make FCFLAGS=[your options without the interprocedural optimization] 



Usage
-----

Prerequisities:

PTGBCYL input files are in JSON format. The distribution contains example input
files in the folder Examples.

To run a simulation, you need the following files:
1. program binary: ptgbcyl (default name)
2. input files for each replica for parallel tempering. By default,
   a simulation with N replicas will look for files named
   input-0.json, input-1.json, etc.
   All input files should contain different values for temperature.

Copy input files to the directory where you want to run the program (and
have the output files). The recommended way to modify the input files is to use
the provided script update_json.py.
 

Running the simulation:

Example of a parallel tempering run with 8 replicas and two OpenMP
threads for domain decomposition:

export $OMP_NUM_THREADS=2
mpirun -np 8 ./ptgbcyl -i ptgbcyl-_I_.json

Here, the input is contained in the files ptgbcyl-in-0.json,...,
ptgbcyl-in-7.json. The specific way to run the program will depend on the
platform you are working on. Here, it is assumed that mpirun is used.

The program will periodically output files restart-0.json,
restart-1.json, etc., which can be used to restart the simulation. It
will also periodically record particle coordinates and simulation
parameters to files output-0.json, output-1.json, etc. The name of the
restart and output files can be defined similarly as the input file with
options -r and -o, respectively:

mpirun -np 2 ./ptgbcyl -i myinputfile-_I_.json -r myrestartfile-_I_.json \
-o myoutputfile-_I_.json


Note about processing the results:

When parallel tempering is used, the results, say in file output-2.json
contain the state of replica 2. A common task is to analyze some
property at a single, constant temperature. For this one needs to gather
data from multiple output files.



